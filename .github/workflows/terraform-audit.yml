
name: 'Terraform Audit'

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform Plan - Audit'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: "1.10.5"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      env:
        STATE_RESOURCE_GROUP: ${{ vars.STATE_RESOURCE_GROUP }}
        STATE_STORAGE_ACCOUNT_NAME: ${{ vars.STATE_STORAGE_ACCOUNT_NAME }}
        STATE_CONTAINER_NAME: ${{ vars.STATE_CONTAINER_NAME || 'tfstate' }}
        STATE_KEY_NAME: ${{ vars.STATE_KEY_NAME || 'terraform.tfstate' }}
      working-directory: ./infra
      run: |
        set -e
        terraform init -backend-config="resource_group_name=$STATE_RESOURCE_GROUP" -backend-config="storage_account_name=$STATE_STORAGE_ACCOUNT_NAME" -backend-config="container_name=$STATE_CONTAINER_NAME" -backend-config="key=$STATE_KEY_NAME"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        DEPLOY_RESOURCE_GROUP: ${{ vars.DEPLOY_RESOURCE_GROUP }}
        DEPLOY_STORAGE_ACCOUNT_NAME: ${{ vars.DEPLOY_STORAGE_ACCOUNT_NAME }}
      working-directory: ./infra
      continue-on-error: false
      run: |
        set +e
        terraform plan -input=false -detailed-exitcode -out main.tfplan -var "resource_group_name=$DEPLOY_RESOURCE_GROUP" -var "storage_account_name=$DEPLOY_STORAGE_ACCOUNT_NAME"
        exitcode=$?
        if [ $exitcode -eq 2 ]; then
          echo "Terraform plan exited with code 2. This means that there are changes to apply."
          echo ":warning: Configuration drift detected." >> $GITHUB_STEP_SUMMARY
          exit 1
        elif [ $exitcode -eq 1 ]; then
          echo "Terraform plan exited with code 1: Error."
          exit 1
        else
        echo ":white_check_mark: No configuration drift detected." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
