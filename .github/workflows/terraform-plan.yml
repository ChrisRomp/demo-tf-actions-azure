
name: 'Terraform'

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - '.devcontainer/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.devcontainer/**'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform:
    name: 'Terraform Plan & Deploy'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      env:
        STATE_RESOURCE_GROUP: ${{ vars.STATE_RESOURCE_GROUP }}
        STATE_STORAGE_ACCOUNT_NAME: ${{ vars.STATE_STORAGE_ACCOUNT_NAME }}
        STATE_CONTAINER_NAME: ${{ vars.STATE_CONTAINER_NAME || 'tfstate' }}
        STATE_KEY_NAME: ${{ vars.STATE_KEY_NAME || 'terraform.tfstate' }}
      working-directory: ./infra
      run: |
        set -e
        terraform init -backend-config="resource_group_name=$STATE_RESOURCE_GROUP" -backend-config="storage_account_name=$STATE_STORAGE_ACCOUNT_NAME" -backend-config="container_name=$STATE_CONTAINER_NAME" -backend-config="key=$STATE_KEY_NAME"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      env:
        DEPLOY_RESOURCE_GROUP: ${{ vars.DEPLOY_RESOURCE_GROUP }}
        DEPLOY_STORAGE_ACCOUNT_NAME: ${{ vars.DEPLOY_STORAGE_ACCOUNT_NAME }}
      working-directory: ./infra
      run: |
        set -e
        terraform plan -no-color -input=false -out main.tfplan -var "resource_group_name=$DEPLOY_RESOURCE_GROUP" -var "storage_account_name=$DEPLOY_STORAGE_ACCOUNT_NAME"

    - name: Update PR
      id: plan-output
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const planText = ${process.env.PLAN};
          // For redacting secrets
          const subId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          const clientId = "${{ secrets.AZURE_CLIENT_ID }}"
          const tenantId = "${{ secrets.AZURE_TENANT_ID }}"
          const subRegex = new RegExp(subId, "g");
          const clientRegex = new RegExp(clientId, "g");
          const tenantRegex = new RegExp(tenantId, "g");
          const redactedPlan = planText
            .replace(subRegex, "[subscription-id]")
            .replace(clientRegex, "[client-id]")
            .replace(tenantRegex, "[tenant-id]");
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
          <details><summary>Show Plan</summary>
          
          \`\`\`
          redactedPlan
          \`\`\`
          
          
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./infra
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        set -e
        terraform apply main.tfplan
